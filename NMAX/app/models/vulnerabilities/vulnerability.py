from django.db import models
from app.models.assets.host_assets import HostAssets


class BaseVulnerability(models.Model):
    """漏洞基类，包含共同的字段"""
    RISK_LEVELS = (
        ('critical', '严重'),
        ('high', '高危'),
        ('medium', '中危'),
        ('low', '低危'),
        ('info', '信息')
    )

    STATUS_CHOICES = (
        ('unverified', '未验证'),
        ('verified', '已验证'),
        ('false_positive', '误报'),
        ('fixing', '修复中'),
        ('fixed', '已修复'),
        ('closed', '已关闭')
    )

    name = models.CharField(max_length=255, db_column='name', db_comment='漏洞名称')
    description = models.TextField(db_column='description', db_comment='漏洞描述')
    cve_id = models.CharField(max_length=50, null=True, blank=True, db_column='cve_id', db_comment='CVE编号')
    risk_level = models.CharField(max_length=20, choices=RISK_LEVELS, db_column='risk_level', db_comment='风险等级')
    impact = models.TextField(db_column='impact', db_comment='影响范围')
    solution = models.TextField(db_column='solution', db_comment='修复建议')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='unverified', db_column='status', db_comment='漏洞状态')
    verify_info = models.TextField(null=True, blank=True, db_column='verify_info', db_comment='验证信息')
    discovered_at = models.DateTimeField(auto_now_add=True, db_column='discovered_at', db_comment='发现时间')
    verified_at = models.DateTimeField(null=True, blank=True, db_column='verified_at', db_comment='验证时间')
    fixed_at = models.DateTimeField(null=True, blank=True, db_column='fixed_at', db_comment='修复时间')
    closed_at = models.DateTimeField(null=True, blank=True, db_column='closed_at', db_comment='关闭时间')
    created_at = models.DateTimeField(auto_now_add=True, db_column='created_at', db_comment='创建时间')
    updated_at = models.DateTimeField(auto_now=True, db_column='updated_at', db_comment='更新时间')

    class Meta:
        abstract = True


class HostVulnerability(BaseVulnerability):
    """主机漏洞模型"""
    VULN_TYPES = (
        ('system', '系统漏洞'),
        ('service', '服务漏洞'),
        ('application', '应用漏洞'),
        ('configuration', '配置漏洞')
    )

    vuln_type = models.CharField(max_length=20, choices=VULN_TYPES, db_column='vuln_type', db_comment='漏洞类型')
    affected_hosts = models.ManyToManyField(HostAssets, related_name='vulnerabilities', db_comment='受影响的主机')
    affected_component = models.CharField(max_length=255, db_column='affected_component', db_comment='受影响的组件')
    affected_version = models.CharField(max_length=100, db_column='affected_version', db_comment='受影响的版本')
    poc = models.TextField(null=True, blank=True, db_column='poc', db_comment='验证POC')

    class Meta:
        db_table = 'host_vulnerabilities'
        db_table_comment = '主机漏洞'
        ordering = ('-risk_level', '-discovered_at')

    def __str__(self) -> str:
        return self.name

    def __repr__(self) -> str:
        return f'<HostVulnerability: {self.id} - {self.name}>'


class WebVulnerability(BaseVulnerability):
    """Web漏洞模型"""
    VULN_TYPES = (
        ('injection', '注入漏洞'),
        ('xss', 'XSS跨站脚本'),
        ('csrf', 'CSRF跨站请求伪造'),
        ('upload', '文件上传'),
        ('rce', '远程代码执行'),
        ('ssrf', '服务器请求伪造'),
        ('logic', '逻辑漏洞'),
        ('other', '其他')
    )

    vuln_type = models.CharField(max_length=20, choices=VULN_TYPES, db_column='vuln_type', db_comment='漏洞类型')
    affected_hosts = models.ManyToManyField(HostAssets, related_name='web_vulnerabilities', db_comment='受影响的主机')
    affected_url = models.URLField(max_length=255, db_column='affected_url', db_comment='受影响的URL')
    request_method = models.CharField(max_length=10, db_column='request_method', db_comment='请求方法')
    request_header = models.TextField(null=True, blank=True, db_column='request_header', db_comment='请求头')
    request_body = models.TextField(null=True, blank=True, db_column='request_body', db_comment='请求体')
    response_header = models.TextField(null=True, blank=True, db_column='response_header', db_comment='响应头')
    response_body = models.TextField(null=True, blank=True, db_column='response_body', db_comment='响应体')
    poc = models.TextField(null=True, blank=True, db_column='poc', db_comment='验证POC')

    class Meta:
        db_table = 'web_vulnerabilities'
        db_table_comment = 'Web漏洞'
        ordering = ('-risk_level', '-discovered_at')

    def __str__(self) -> str:
        return self.name

    def __repr__(self) -> str:
        return f'<WebVulnerability: {self.id} - {self.name}>'